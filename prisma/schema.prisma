generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum UserRole {
  admin
  teacher
  student
}

model User {
  id                 String    @id @default(uuid()) @db.Uuid
  name               String
  email              String    @unique @db.VarChar(255)
  password           String
  role               UserRole
  accountActivatedAt DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt

  userActionToken UserActionToken[]
  teacher         Teacher?
  student         Student?

  @@map("users")
}

enum TeacherRole {
  internshipManagerTeacher
  courseManagerTeacher
  workCompletionManagerTeacher
  complementaryActivitiesManagerTeacher
  extensionsActivitiesManagerTeacher
  normalTeacher
}

model Teacher {
  id       String  @id @default(uuid()) @db.Uuid
  isActive Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid

  teacherCourse TeacherCourse[]

  @@map("teachers")
}

enum StudentType {
  incomingStudent
  outgoingStudent
}

model Student {
  id            String      @id @default(uuid()) @db.Uuid
  matriculation String      @unique @db.VarChar(10)
  type          StudentType @default(incomingStudent)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @unique @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid

  @@map("students")
}

model Course {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  student             Student?
  teacherCourse       TeacherCourse[]
  courseDepartureData CourseDepartureData[]

  @@map("courses")
}

model TeacherCourse {
  id          String      @id @default(uuid()) @db.Uuid
  teacherRole TeacherRole @default(normalTeacher)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.Uuid

  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String  @db.Uuid

  @@unique([courseId, teacherId])
  @@map("teacherCourse")
}

enum UserActionTokenType {
  accountConfirmation
  passwordReset
}

model UserActionToken {
  id         String              @id @default(uuid()) @db.Uuid
  token      String              @unique
  actionType UserActionTokenType
  expiresAt  DateTime
  createdAt  DateTime            @default(now())

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userActionTokens")
}

model State {
  id   String @id @default(uuid()) @db.Uuid
  name String
  city City[]

  @@map("states")
}

model City {
  id   String @id @default(uuid()) @db.Uuid
  name String

  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId String @db.Uuid

  @@map("cities")
}

enum Semester {
  first
  second
}

model CourseDepartureData {
  id              String    @id @default(uuid()) @db.Uuid
  year            Int       @db.SmallInt
  semester        Semester  @default(first)
  completed       Int // Estudantes graduados
  maximumDuration Int // Tempo máximo
  dropouts        Int // Abandonos
  transfers       Int // Transferências
  withdrawals     Int // Desistências
  removals        Int // Remoção administrativas
  newExams        Int // Novo vestibular
  deaths          Int // Falecimento de alunos
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.Uuid

  @@unique([year, semester, courseId])
  @@map("courseDepartureData")
}
